'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from 'sonner';
import { Trash2, PlusCircle, Wand2 } from 'lucide-react';

interface Question {
  questionText: string;
  options: string[];
}

export default function CreateSurveyPage() {
  const [topic, setTopic] = useState('');
  const [title, setTitle] = useState('');
  const [questions, setQuestions] = useState<Question[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const router = useRouter();

  const handleGenerateQuestions = async () => {
    if (!topic) {
      toast.error('Please enter a topic to generate questions.');
      return;
    }
    setIsGenerating(true);
    try {
      const response = await fetch('/api/generate-survey', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ topic }),
      });
      const data = await response.json();
      if (response.ok) {
        setQuestions(data.questions);
        setTitle(topic);
        toast.success('Questions generated by AI!');
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      toast.error('Failed to generate questions. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleQuestionChange = (index: number, value: string) => {
    const newQuestions = [...questions];
    newQuestions[index].questionText = value;
    setQuestions(newQuestions);
  };

  const handleOptionChange = (qIndex: number, oIndex: number, value: string) => {
    const newQuestions = [...questions];
    newQuestions[qIndex].options[oIndex] = value;
    setQuestions(newQuestions);
  };

  const addQuestion = () => {
    setQuestions([
      ...questions,
      { questionText: '', options: ['', '', '', ''] },
    ]);
  };

  const deleteQuestion = (index: number) => {
    const newQuestions = questions.filter((_, i) => i !== index);
    setQuestions(newQuestions);
  };

  const handleSaveSurvey = async () => {
    if (!title) {
        toast.error("Please provide a title for your survey.");
        return;
    }
    if (questions.length === 0) {
        toast.error("Cannot save a survey with no questions.");
        return;
    }
    setIsSaving(true);
    try {
        const response = await fetch('/api/surveys', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title, questions })
        });
        const data = await response.json();
        if (response.ok) {
            toast.success("Survey saved successfully!");
            router.push('/dashboard');
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        toast.error("Failed to save the survey.");
    } finally {
        setIsSaving(false);
    }
  };

  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-2">Create a New Survey</h1>
        <p className="text-slate-500 mb-8">
          Start by describing your survey topic, and let our AI do the heavy lifting.
        </p>

        <Card className="mb-8">
          <CardContent className="pt-6">
            <div className="flex flex-col sm:flex-row gap-4 items-end">
              <div className="w-full">
                <Label htmlFor="topic">Survey Topic</Label>
                <Input
                  id="topic"
                  placeholder="e.g., Customer satisfaction for a coffee shop"
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                />
              </div>
              <Button
                onClick={handleGenerateQuestions}
                disabled={isGenerating}
                className="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700"
              >
                <Wand2 className="mr-2 h-4 w-4" />
                {isGenerating ? 'Generating...' : 'Generate with AI'}
              </Button>
            </div>
          </CardContent>
        </Card>

        {questions.length > 0 && (
          <div>
            <div className="mb-6">
                <Label htmlFor="survey-title" className="text-lg">Survey Title</Label>
                <Input 
                    id="survey-title"
                    className="text-2xl font-bold p-6 mt-2" 
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                />
            </div>

            <div className="space-y-6">
              {questions.map((q, qIndex) => (
                <Card key={qIndex}>
                  <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle>Question {qIndex + 1}</CardTitle>
                    <Button variant="ghost" size="icon" onClick={() => deleteQuestion(qIndex)}>
                      <Trash2 className="h-5 w-5 text-red-500" />
                    </Button>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <Input
                      placeholder="Enter your question"
                      value={q.questionText}
                      onChange={(e) => handleQuestionChange(qIndex, e.target.value)}
                      className="text-lg"
                    />
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      {q.options.map((opt, oIndex) => (
                        <Input
                          key={oIndex}
                          placeholder={`Option ${oIndex + 1}`}
                          value={opt}
                          onChange={(e) => handleOptionChange(qIndex, oIndex, e.target.value)}
                        />
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
            
            <div className="flex justify-between mt-8">
                <Button variant="outline" onClick={addQuestion}>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    Add Question
                </Button>
                <Button onClick={handleSaveSurvey} disabled={isSaving} className="bg-indigo-600 hover:bg-indigo-700">
                    {isSaving ? "Saving..." : "Save Survey"}
                </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}